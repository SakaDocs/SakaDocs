"use strict";var ApplicationConfiguration=function(){var applicationModuleName="patadocs";return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule:function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)}}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("atms"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("nationals"),ApplicationConfiguration.registerModule("students"),ApplicationConfiguration.registerModule("users"),angular.module("atms").config(["$stateProvider",function($stateProvider){$stateProvider.state("atms",{url:"/atms",templateUrl:"modules/atms/views/atms.client.view.html"})}]),angular.module("atms").controller("AtmsController",["$scope",function($scope){}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("footer",{url:"/footer",templateUrl:"modules/core/views/footer.client.view.html"}).state("atm",{url:"/atm",templateUrl:"modules/atms/views/atms.client.view.html"}).state("national",{url:"/national",templateUrl:"modules/nationals/views/nationals.client.view.html"}).state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","$http","$location","Authentication","Menus",function($scope,$http,$location,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.search=function(){$location.path($scope.docType)},$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||void 0===isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||void 0===roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||void 0===isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||void 0===roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("nationals").config(["$stateProvider",function($stateProvider){$stateProvider.state("claimid",{url:"/claimid",templateUrl:"modules/nationals/views/claimid.client.view.html"}).state("postid",{url:"/postid",templateUrl:"modules/nationals/views/postid.client.view.html"}).state("nationals",{url:"/nationals",templateUrl:"modules/nationals/views/nationals.client.view.html"})}]),angular.module("nationals").controller("ClaimController",["$scope","$location","Authentication",function($scope,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user?$scope.claim=function(){$scope.authentication.user.accountBalance<200||($scope.message="claim id")}:$location.path("/signin")}]),angular.module("nationals").controller("NationalsController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.find=function(){$http.get("/nationalids").success(function(res){$scope.ids=res}).error(function(res){$scope.error=res.message})},$scope.claimId=function(){}}]),angular.module("nationals").controller("PostController",["$scope","$timeout","$location","Authentication","Uploadfileservice",function($scope,$timeout,$location,Authentication,Uploadfileservice){$scope.authentication=Authentication,$scope.authentication.user?($scope.file={},$scope.Submit=function(){$scope.uploading=!0,$scope.id.finderNumber=$scope.authentication.user.phoneNumber,Uploadfileservice.upload($scope.file,$scope.id).then(function(data){data.data.success?($scope.alert="alert alert-success",$scope.message=data.data.message,$scope.file={},$scope.uploading=!1):($scope.uploading=!1,$scope.alert="alert alert-danger",$scope.message=data.data.message,$scope.file={})})},$scope.photoChanged=function(files){if(files.length>0&&files[0].name.match(/\.(png|jpg|jpeg)$/)){$scope.uploading=!0;var file=files[0],fileReader=new FileReader;fileReader.readAsDataURL(file),fileReader.onload=function(e){$timeout(function(){$scope.thumbnail={},$scope.thumbnail.dataUrl=e.target.result,$scope.uploading=!1,$scope.message=!1})}}else $scope.thumbnail={},$scope.message=!1}):$location.path("/signin")}]),angular.module("nationals").directive("fileModel",["$parse",function($parse){return{restrict:"A",link:function(scope,element,attrs){var parsedFile=$parse(attrs.fileModel),parsedFileSetter=parsedFile.assign;element.bind("change",function(){scope.$apply(function(){parsedFileSetter(scope,element[0].files[0])})})}}}]),angular.module("nationals").service("Uploadfileservice",["$http",function($http){this.upload=function(file,id){var data={model:id,file:file},fd=new FormData;return fd.append("iddetails",angular.toJson(data.model)),fd.append("idphoto",data.file.upload),$http.post("/postnationalid",fd,{transformRequest:angular.identity,headers:{"Content-Type":void 0}})}}]),angular.module("students").config(["$stateProvider",function($stateProvider){$stateProvider.state("studentids",{url:"/studentids",templateUrl:"modules/students/views/studentids.client.view.html"})}]),angular.module("students").controller("StudentidsController",["$scope",function($scope){}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin")}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;new Users($scope.user).$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);